diff --git a/fhi_lib/lib/src/xran_main.c b/fhi_lib/lib/src/xran_main.c
index 89dcc1f..7845248 100644
--- a/fhi_lib/lib/src/xran_main.c
+++ b/fhi_lib/lib/src/xran_main.c
@@ -35,7 +35,11 @@
 #include <stdio.h>
 #include <pthread.h>
 #include <malloc.h>
+#if defined(__arm__) || defined(__aarch64__)
+#include <arm_neon.h>
+#else
 #include <immintrin.h>
+#endif
 
 #include <rte_common.h>
 #include <rte_eal.h>
@@ -102,6 +106,30 @@ void tti_to_phy_cb(struct rte_timer *tim, void *arg);
 
 int32_t xran_pkt_gen_process_ring(struct rte_ring *r);
 
+int
+allocate_worker_th_ctx(struct xran_worker_th_ctx **pThCtx) {
+    void *ptr = NULL;
+
+#if defined(__arm__) || defined(__aarch64__)
+    // ARM-specific memory allocation
+    if (posix_memalign(&ptr, 64, sizeof(struct xran_worker_th_ctx)) != 0) {
+        print_err("posix_memalign: pThCtx allocation error\n");
+        return XRAN_STATUS_FAIL;
+    }
+#else
+    // Intel-specific memory allocation
+    ptr = _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
+    if (ptr == NULL) {
+        print_err("_mm_malloc: pThCtx allocation error\n");
+        return XRAN_STATUS_FAIL;
+    }
+#endif
+
+    *pThCtx = (struct xran_worker_th_ctx *)ptr;
+    memset(*pThCtx, 0, sizeof(struct xran_worker_th_ctx));
+    return XRAN_STATUS_SUCCESS;
+}
+
 void
 xran_updateSfnSecStart(void)
 {
@@ -1837,8 +1865,13 @@ xran_spawn_workers(void)
         nWorkerCore = nWorkerCore << 1;
     }
 
+#if defined(__arm__) || defined(__aarch64__)
+    icx_cpu = 0;
+#else
     extern int _may_i_use_cpu_feature(unsigned __int64);
     icx_cpu = _may_i_use_cpu_feature(_FEATURE_AVX512IFMA52);
+#endif
+
 
     printf("O-XU      %d\n", eth_ctx->io_cfg.id);
     printf("HW        %d\n", icx_cpu);
@@ -1876,11 +1909,10 @@ xran_spawn_workers(void)
                 eth_ctx->time_wrk_cfg.arg   = NULL;
                 eth_ctx->time_wrk_cfg.state = 1;
 
-                pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                if(pThCtx == NULL){
+		if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                     print_err("pThCtx allocation error\n");
-                    return XRAN_STATUS_FAIL;
-                }
+        	    return XRAN_STATUS_FAIL;
+    		}
                 memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                 pThCtx->worker_id    = 0;
                 pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -1897,12 +1929,11 @@ xran_spawn_workers(void)
                 eth_ctx->time_wrk_cfg.state = 1;
 
                 /* workers */
-                /** 0 **/
-                pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                if(pThCtx == NULL){
+		if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                     print_err("pThCtx allocation error\n");
-                    return XRAN_STATUS_FAIL;
-                }
+        	    return XRAN_STATUS_FAIL;
+    		}
+                /** 0 **/
                 memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                 pThCtx->worker_id      = 0;
                 pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -1926,10 +1957,10 @@ xran_spawn_workers(void)
 
                 /** 1 - CP GEN **/
                 pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                if(pThCtx == NULL){
+		if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                     print_err("pThCtx allocation error\n");
-                    return XRAN_STATUS_FAIL;
-                }
+        	    return XRAN_STATUS_FAIL;
+    		}
                 memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                 pThCtx->worker_id      = 1;
                 pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -1957,10 +1988,10 @@ xran_spawn_workers(void)
                 p_dev->tx_sym_gen_func = xran_process_tx_sym_cp_on_opt;
 
                 pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                if(pThCtx == NULL){
+		if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                     print_err("pThCtx allocation error\n");
-                    return XRAN_STATUS_FAIL;
-                }
+        	    return XRAN_STATUS_FAIL;
+    		}
                 memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                 pThCtx->worker_id    = 0;
                 pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -1979,11 +2010,10 @@ xran_spawn_workers(void)
 
                     /* workers */
                     /** 0 **/
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    	            }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id      = 0;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2281,11 +2311,10 @@ xran_spawn_workers(void)
 
                     /* workers */
                     /** 0  Eth RX */
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id = 0;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2296,11 +2325,10 @@ xran_spawn_workers(void)
                     eth_ctx->pkt_wrk_cfg[pThCtx->worker_id].arg   = pThCtx;
 
                     /** 1  FH RX and BBDEV */
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id = 1;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2311,11 +2339,10 @@ xran_spawn_workers(void)
                     eth_ctx->pkt_wrk_cfg[pThCtx->worker_id].arg   = pThCtx;
 
                     /** 2  FH RX and BBDEV */
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id = 2;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2326,11 +2353,10 @@ xran_spawn_workers(void)
                     eth_ctx->pkt_wrk_cfg[pThCtx->worker_id].arg   = pThCtx;
 
                     /** 3  FH RX and BBDEV */
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id = 3;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2341,11 +2367,10 @@ xran_spawn_workers(void)
                     eth_ctx->pkt_wrk_cfg[pThCtx->worker_id].arg   = pThCtx;
 
                     /**  FH TX and BBDEV */
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id = 4;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2379,11 +2404,10 @@ xran_spawn_workers(void)
 
                     /* workers */
                     /** 0 **/
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id      = 0;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2406,11 +2430,10 @@ xran_spawn_workers(void)
                     }
 
                     /** 1 - CP GEN **/
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id      = 1;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2433,11 +2456,10 @@ xran_spawn_workers(void)
 
                     /* workers */
                     /** 0 **/
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id      = 0;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2629,11 +2651,10 @@ xran_spawn_workers(void)
                     eth_ctx->pkt_wrk_cfg[pThCtx->worker_id].arg   = pThCtx;
 
                     /** 4 UP GEN **/
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id    = 4;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2651,11 +2672,10 @@ xran_spawn_workers(void)
 
                     /* workers */
                     /** 0  Eth RX */
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id = 0;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2666,11 +2686,10 @@ xran_spawn_workers(void)
                     eth_ctx->pkt_wrk_cfg[pThCtx->worker_id].arg   = pThCtx;
 
                     /** 1  FH RX and BBDEV */
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id = 1;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2681,11 +2700,10 @@ xran_spawn_workers(void)
                     eth_ctx->pkt_wrk_cfg[pThCtx->worker_id].arg   = pThCtx;
 
                     /** 2  FH RX and BBDEV */
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id = 2;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2696,11 +2714,10 @@ xran_spawn_workers(void)
                     eth_ctx->pkt_wrk_cfg[pThCtx->worker_id].arg   = pThCtx;
 
                     /** 3  FH RX and BBDEV */
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id = 3;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
@@ -2711,11 +2728,10 @@ xran_spawn_workers(void)
                     eth_ctx->pkt_wrk_cfg[pThCtx->worker_id].arg   = pThCtx;
 
                     /**  FH TX and BBDEV */
-                    pThCtx = (struct xran_worker_th_ctx*) _mm_malloc(sizeof(struct xran_worker_th_ctx), 64);
-                    if(pThCtx == NULL){
+		    if (allocate_worker_th_ctx(&pThCtx) != XRAN_STATUS_SUCCESS) {
                         print_err("pThCtx allocation error\n");
-                        return XRAN_STATUS_FAIL;
-                    }
+        	        return XRAN_STATUS_FAIL;
+    		    }
                     memset(pThCtx, 0, sizeof(struct xran_worker_th_ctx));
                     pThCtx->worker_id = 4;
                     pThCtx->worker_core_id = core_map[pThCtx->worker_id];
